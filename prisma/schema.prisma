// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  categories     UserCategory[]
  newslettersSent NewsletterSent[]

  @@map("users")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  label String

  // Relationships
  users UserCategory[]

  @@map("categories")
}

model UserCategory {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_categories")
}

model Newsletter {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  weekOf      DateTime
  categories  String[] // JSON array of category names
  articles    Json     // JSON array of article objects
  htmlContent String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  sentTo NewsletterSent[]

  @@unique([weekOf, categories])
  @@map("newsletters")
}

model NewsletterSent {
  id           String   @id @default(cuid())
  userId       String
  newsletterId String
  sentAt       DateTime @default(now())

  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsletter Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@unique([userId, newsletterId])
  @@map("newsletter_sent")
}
